// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: pinecone_grpc/vector_service.proto

package pinecone_grpc

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/rpc/errdetails"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the vector's unique id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This is the vector data included in the request.
	Values []float32 `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	// This is the metadata included in the request.
	Metadata *structpb.Struct `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{0}
}

func (x *Vector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vector) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Vector) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ScoredVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the vector's unique id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar.
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	// This is the vector data, if it is requested.
	Values []float32 `protobuf:"fixed32,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// This is the metadata, if it is requested.
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ScoredVector) Reset() {
	*x = ScoredVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoredVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoredVector) ProtoMessage() {}

func (x *ScoredVector) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoredVector.ProtoReflect.Descriptor instead.
func (*ScoredVector) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{1}
}

func (x *ScoredVector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ScoredVector) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ScoredVector) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ScoredVector) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The request for the `Upsert` operation.
type UpsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the actual array data.
	Vectors []*Vector `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty"`
	// This is the namespace name where you upsert vectors.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *UpsertRequest) Reset() {
	*x = UpsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRequest) ProtoMessage() {}

func (x *UpsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRequest.ProtoReflect.Descriptor instead.
func (*UpsertRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertRequest) GetVectors() []*Vector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *UpsertRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response for the `Upsert` operation.
type UpsertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of vectors upserted.
	UpsertedCount uint32 `protobuf:"varint,1,opt,name=upserted_count,json=upsertedCount,proto3" json:"upserted_count,omitempty"`
}

func (x *UpsertResponse) Reset() {
	*x = UpsertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertResponse) ProtoMessage() {}

func (x *UpsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertResponse.ProtoReflect.Descriptor instead.
func (*UpsertResponse) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertResponse) GetUpsertedCount() uint32 {
	if x != nil {
		return x.UpsertedCount
	}
	return 0
}

// The request for the `Delete` operation.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vectors to delete.
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// This indicates that all vectors in the index namespace should be deleted.
	DeleteAll bool `protobuf:"varint,2,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
	// The namespace to delete vectors from, if applicable.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

func (x *DeleteRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response for the `Delete` operation.
type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{5}
}

// The request for the `Fetch` operation.
type FetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vector ids to fetch.
	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Namespace string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{6}
}

func (x *FetchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FetchRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response for the `Fetch` operation.
type FetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fetched vectors, in the form of a map between the fetched ids and the fetched vectors
	Vectors map[string]*Vector `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The namespace of the vectors.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *FetchResponse) Reset() {
	*x = FetchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResponse) ProtoMessage() {}

func (x *FetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResponse.ProtoReflect.Descriptor instead.
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{7}
}

func (x *FetchResponse) GetVectors() map[string]*Vector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *FetchResponse) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// A single query vector within a `QueryRequest`.
type QueryVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query vector values. This should be the same length as the dimension of the index being queried.
	Values []float32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	// An override for the number of results to return for this query vector.
	TopK uint32 `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	// An override the namespace to search.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// An override for the metadata filter to apply. This replaces the request-level filter.
	Filter *structpb.Struct `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *QueryVector) Reset() {
	*x = QueryVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVector) ProtoMessage() {}

func (x *QueryVector) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVector.ProtoReflect.Descriptor instead.
func (*QueryVector) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{8}
}

func (x *QueryVector) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *QueryVector) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *QueryVector) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryVector) GetFilter() *structpb.Struct {
	if x != nil {
		return x.Filter
	}
	return nil
}

// The request for the `Query` operation.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace to query.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The number of results to return for each query.
	TopK uint32 `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	// The filter to apply if no filter is specified in `QueryVector. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/`
	Filter *structpb.Struct `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Indicates whether vector values are included in the response.
	IncludeValues bool `protobuf:"varint,4,opt,name=include_values,json=includeValues,proto3" json:"include_values,omitempty"`
	// Indicates whether metadata is included in the response as well as the ids.
	IncludeMetadata bool `protobuf:"varint,5,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	// The query vectors.
	Queries []*QueryVector `protobuf:"bytes,6,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryRequest) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *QueryRequest) GetFilter() *structpb.Struct {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryRequest) GetIncludeValues() bool {
	if x != nil {
		return x.IncludeValues
	}
	return false
}

func (x *QueryRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

func (x *QueryRequest) GetQueries() []*QueryVector {
	if x != nil {
		return x.Queries
	}
	return nil
}

// The query results for a single `QueryVector`
type SingleQueryResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The matches for the vectors.
	Matches []*ScoredVector `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	// The namespace for the vectors.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *SingleQueryResults) Reset() {
	*x = SingleQueryResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleQueryResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleQueryResults) ProtoMessage() {}

func (x *SingleQueryResults) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleQueryResults.ProtoReflect.Descriptor instead.
func (*SingleQueryResults) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{10}
}

func (x *SingleQueryResults) GetMatches() []*ScoredVector {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *SingleQueryResults) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar.
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The results of each query. The order is the same as `QueryRequest.queries`.
	Results []*SingleQueryResults `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{11}
}

func (x *QueryResponse) GetResults() []*SingleQueryResults {
	if x != nil {
		return x.Results
	}
	return nil
}

// The request for the `DescribeIndexStats` operation.
type DescribeIndexStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DescribeIndexStatsRequest) Reset() {
	*x = DescribeIndexStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeIndexStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeIndexStatsRequest) ProtoMessage() {}

func (x *DescribeIndexStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeIndexStatsRequest.ProtoReflect.Descriptor instead.
func (*DescribeIndexStatsRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{12}
}

// A summary of the contents of a namespace.
type NamespaceSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the
	// underlying index and corresponding query results, etc.
	VectorCount uint32 `protobuf:"varint,1,opt,name=vector_count,json=vectorCount,proto3" json:"vector_count,omitempty"`
}

func (x *NamespaceSummary) Reset() {
	*x = NamespaceSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSummary) ProtoMessage() {}

func (x *NamespaceSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSummary.ProtoReflect.Descriptor instead.
func (*NamespaceSummary) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{13}
}

func (x *NamespaceSummary) GetVectorCount() uint32 {
	if x != nil {
		return x.VectorCount
	}
	return 0
}

// The response for the `DescribeIndexStats` operation.
type DescribeIndexStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A mapping for each namespace in the index from namespace name to a summary of its contents.
	Namespaces map[string]*NamespaceSummary `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The dimension of the indexed vectors.
	Dimension uint32 `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *DescribeIndexStatsResponse) Reset() {
	*x = DescribeIndexStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_grpc_vector_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeIndexStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeIndexStatsResponse) ProtoMessage() {}

func (x *DescribeIndexStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_grpc_vector_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeIndexStatsResponse.ProtoReflect.Descriptor instead.
func (*DescribeIndexStatsResponse) Descriptor() ([]byte, []int) {
	return file_pinecone_grpc_vector_service_proto_rawDescGZIP(), []int{14}
}

func (x *DescribeIndexStatsResponse) GetNamespaces() map[string]*NamespaceSummary {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *DescribeIndexStatsResponse) GetDimension() uint32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

var File_pinecone_grpc_vector_service_proto protoreflect.FileDescriptor

var file_pinecone_grpc_vector_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x4a, 0x12, 0x22,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x31,
	0x22, 0x78, 0x40, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x33, 0x92,
	0x41, 0x2d, 0x4a, 0x28, 0x5b, 0x30, 0x2e, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x2c, 0x20, 0x30,
	0x2e, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e,
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x38, 0x5d, 0x80, 0x01, 0x01, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x20, 0x32, 0x30, 0x31,
	0x39, 0x7d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x89, 0x02, 0x0a,
	0x0c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x19, 0x4a, 0x12,
	0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2d,
	0x31, 0x22, 0x78, 0x40, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x09, 0x92,
	0x41, 0x06, 0x4a, 0x04, 0x30, 0x2e, 0x30, 0x38, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42,
	0x2d, 0x92, 0x41, 0x2a, 0x4a, 0x28, 0x5b, 0x30, 0x2e, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x2c,
	0x20, 0x30, 0x2e, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20,
	0x30, 0x2e, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x38, 0x5d, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x4a, 0x26, 0x7b, 0x22, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x22, 0x2c,
	0x20, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x39, 0x7d, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x78, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x42, 0x0c, 0x92, 0x41, 0x06, 0x78, 0xe8, 0x07, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x40, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0x92, 0x41,
	0x04, 0x4a, 0x02, 0x31, 0x30, 0x52, 0x0d, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x4a, 0x10, 0x5b, 0x22, 0x69, 0x64, 0x2d, 0x30,
	0x22, 0x2c, 0x20, 0x22, 0x69, 0x64, 0x2d, 0x31, 0x22, 0x5d, 0x78, 0xe8, 0x07, 0x80, 0x01, 0x01,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12,
	0x36, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x0c, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x4a, 0x10, 0x5b, 0x22, 0x69,
	0x64, 0x2d, 0x30, 0x22, 0x2c, 0x20, 0x22, 0x69, 0x64, 0x2d, 0x31, 0x22, 0x5d, 0x78, 0xe8, 0x07,
	0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x43, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x02, 0x0a, 0x0b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x42, 0x36, 0x92, 0x41, 0x30, 0x4a, 0x28,
	0x5b, 0x30, 0x2e, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x33, 0x2c, 0x20,
	0x30, 0x2e, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x2c, 0x20, 0x30,
	0x2e, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x38, 0x5d, 0x78, 0x90, 0x4e, 0x80, 0x01, 0x01, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x16, 0x4a, 0x02, 0x31,
	0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3, 0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41,
	0x15, 0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x52, 0x92, 0x41, 0x4f,
	0x4a, 0x4d, 0x7b, 0x22, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x24, 0x69,
	0x6e, 0x22, 0x3a, 0x20, 0x5b, 0x22, 0x63, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x22, 0x2c, 0x20, 0x22,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x64,
	0x72, 0x61, 0x6d, 0x61, 0x22, 0x5d, 0x7d, 0x2c, 0x20, 0x22, 0x79, 0x65, 0x61, 0x72, 0x22, 0x3a,
	0x20, 0x7b, 0x22, 0x24, 0x65, 0x71, 0x22, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x39, 0x7d, 0x7d, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xaa, 0x03, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x4a, 0x13, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x1c, 0x92, 0x41, 0x16, 0x4a, 0x02, 0x31, 0x30, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc3,
	0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x4b, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x52, 0x92,
	0x41, 0x4f, 0x4a, 0x4d, 0x7b, 0x22, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x3a, 0x20, 0x7b, 0x22,
	0x24, 0x69, 0x6e, 0x22, 0x3a, 0x20, 0x5b, 0x22, 0x63, 0x6f, 0x6d, 0x65, 0x64, 0x79, 0x22, 0x2c,
	0x20, 0x22, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x22, 0x2c, 0x20,
	0x22, 0x64, 0x72, 0x61, 0x6d, 0x61, 0x22, 0x5d, 0x7d, 0x2c, 0x20, 0x22, 0x79, 0x65, 0x61, 0x72,
	0x22, 0x3a, 0x20, 0x7b, 0x22, 0x24, 0x65, 0x71, 0x22, 0x3a, 0x20, 0x32, 0x30, 0x31, 0x39, 0x7d,
	0x7d, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x92, 0x41,
	0x0d, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x4a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x33, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b,
	0x92, 0x41, 0x05, 0x78, 0x64, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x64, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x0c,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x4a, 0x05, 0x35, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0b,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x1a,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a,
	0x04, 0x31, 0x30, 0x32, 0x34, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x1a, 0x50, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x32, 0x6e, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x35, 0x30, 0x30,
	0x30, 0x30, 0x7d, 0x2c, 0x20, 0x22, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x32, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x33, 0x30, 0x30, 0x30,
	0x30, 0x7d, 0x7d, 0x2c, 0x20, 0x22, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x3a, 0x20, 0x31, 0x30, 0x32, 0x34, 0x7d, 0x32, 0xa6, 0x04, 0x0a, 0x0d, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x06, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x12, 0x0e, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x1b, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x06, 0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x60,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x2a, 0x0f, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x92, 0x41, 0x1b, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x5b, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x0d, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x12, 0x0e, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x92, 0x41, 0x1a, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x56, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x06, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x1a, 0x0a, 0x11, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x92, 0x41, 0x29, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x14, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x42, 0xc1, 0x03, 0x0a, 0x11, 0x69, 0x6f, 0x2e, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x69, 0x6e,
	0x65, 0x63, 0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x92, 0x41, 0xf6, 0x02, 0x12, 0x4b,
	0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x20, 0x41, 0x50, 0x49, 0x22, 0x3b,
	0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x20, 0x4f, 0x70,
	0x73, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x69, 0x6e, 0x65, 0x63,
	0x6f, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x1a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40,
	0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x1a, 0x39, 0x7b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2d, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x7b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x2e, 0x70, 0x69, 0x6e, 0x65, 0x63,
	0x6f, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x78, 0x0a,
	0x76, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x68, 0x08,
	0x02, 0x12, 0x59, 0x41, 0x6e, 0x20, 0x41, 0x50, 0x49, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x20, 0x50, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x20, 0x41, 0x50, 0x49, 0x73, 0x2e,
	0x20, 0x47, 0x65, 0x74, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x61, 0x74, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f,
	0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x1a, 0x07, 0x41, 0x70,
	0x69, 0x2d, 0x4b, 0x65, 0x79, 0x20, 0x02, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x72, 0x39, 0x0a, 0x19, 0x4d, 0x6f, 0x72,
	0x65, 0x20, 0x50, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x77, 0x77, 0x77, 0x2e, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2e, 0x69, 0x6f, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pinecone_grpc_vector_service_proto_rawDescOnce sync.Once
	file_pinecone_grpc_vector_service_proto_rawDescData = file_pinecone_grpc_vector_service_proto_rawDesc
)

func file_pinecone_grpc_vector_service_proto_rawDescGZIP() []byte {
	file_pinecone_grpc_vector_service_proto_rawDescOnce.Do(func() {
		file_pinecone_grpc_vector_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pinecone_grpc_vector_service_proto_rawDescData)
	})
	return file_pinecone_grpc_vector_service_proto_rawDescData
}

var file_pinecone_grpc_vector_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_pinecone_grpc_vector_service_proto_goTypes = []interface{}{
	(*Vector)(nil),                     // 0: Vector
	(*ScoredVector)(nil),               // 1: ScoredVector
	(*UpsertRequest)(nil),              // 2: UpsertRequest
	(*UpsertResponse)(nil),             // 3: UpsertResponse
	(*DeleteRequest)(nil),              // 4: DeleteRequest
	(*DeleteResponse)(nil),             // 5: DeleteResponse
	(*FetchRequest)(nil),               // 6: FetchRequest
	(*FetchResponse)(nil),              // 7: FetchResponse
	(*QueryVector)(nil),                // 8: QueryVector
	(*QueryRequest)(nil),               // 9: QueryRequest
	(*SingleQueryResults)(nil),         // 10: SingleQueryResults
	(*QueryResponse)(nil),              // 11: QueryResponse
	(*DescribeIndexStatsRequest)(nil),  // 12: DescribeIndexStatsRequest
	(*NamespaceSummary)(nil),           // 13: NamespaceSummary
	(*DescribeIndexStatsResponse)(nil), // 14: DescribeIndexStatsResponse
	nil,                                // 15: FetchResponse.VectorsEntry
	nil,                                // 16: DescribeIndexStatsResponse.NamespacesEntry
	(*structpb.Struct)(nil),            // 17: google.protobuf.Struct
}
var file_pinecone_grpc_vector_service_proto_depIdxs = []int32{
	17, // 0: Vector.metadata:type_name -> google.protobuf.Struct
	17, // 1: ScoredVector.metadata:type_name -> google.protobuf.Struct
	0,  // 2: UpsertRequest.vectors:type_name -> Vector
	15, // 3: FetchResponse.vectors:type_name -> FetchResponse.VectorsEntry
	17, // 4: QueryVector.filter:type_name -> google.protobuf.Struct
	17, // 5: QueryRequest.filter:type_name -> google.protobuf.Struct
	8,  // 6: QueryRequest.queries:type_name -> QueryVector
	1,  // 7: SingleQueryResults.matches:type_name -> ScoredVector
	10, // 8: QueryResponse.results:type_name -> SingleQueryResults
	16, // 9: DescribeIndexStatsResponse.namespaces:type_name -> DescribeIndexStatsResponse.NamespacesEntry
	0,  // 10: FetchResponse.VectorsEntry.value:type_name -> Vector
	13, // 11: DescribeIndexStatsResponse.NamespacesEntry.value:type_name -> NamespaceSummary
	2,  // 12: VectorService.Upsert:input_type -> UpsertRequest
	4,  // 13: VectorService.Delete:input_type -> DeleteRequest
	6,  // 14: VectorService.Fetch:input_type -> FetchRequest
	9,  // 15: VectorService.Query:input_type -> QueryRequest
	12, // 16: VectorService.DescribeIndexStats:input_type -> DescribeIndexStatsRequest
	3,  // 17: VectorService.Upsert:output_type -> UpsertResponse
	5,  // 18: VectorService.Delete:output_type -> DeleteResponse
	7,  // 19: VectorService.Fetch:output_type -> FetchResponse
	11, // 20: VectorService.Query:output_type -> QueryResponse
	14, // 21: VectorService.DescribeIndexStats:output_type -> DescribeIndexStatsResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pinecone_grpc_vector_service_proto_init() }
func file_pinecone_grpc_vector_service_proto_init() {
	if File_pinecone_grpc_vector_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pinecone_grpc_vector_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoredVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleQueryResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeIndexStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_grpc_vector_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeIndexStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pinecone_grpc_vector_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pinecone_grpc_vector_service_proto_goTypes,
		DependencyIndexes: file_pinecone_grpc_vector_service_proto_depIdxs,
		MessageInfos:      file_pinecone_grpc_vector_service_proto_msgTypes,
	}.Build()
	File_pinecone_grpc_vector_service_proto = out.File
	file_pinecone_grpc_vector_service_proto_rawDesc = nil
	file_pinecone_grpc_vector_service_proto_goTypes = nil
	file_pinecone_grpc_vector_service_proto_depIdxs = nil
}
