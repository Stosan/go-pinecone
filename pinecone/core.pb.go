// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.3
// source: pinecone/core.proto

package pinecone

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status_StatusCode int32

const (
	Status_SUCCESS         Status_StatusCode = 0 // success
	Status_READY           Status_StatusCode = 1 // ready to use
	Status_ERROR           Status_StatusCode = 2 // error
	Status_ERROR_DUPLICATE Status_StatusCode = 3 // already a existing service
)

// Enum value maps for Status_StatusCode.
var (
	Status_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "READY",
		2: "ERROR",
		3: "ERROR_DUPLICATE",
	}
	Status_StatusCode_value = map[string]int32{
		"SUCCESS":         0,
		"READY":           1,
		"ERROR":           2,
		"ERROR_DUPLICATE": 3,
	}
)

func (x Status_StatusCode) Enum() *Status_StatusCode {
	p := new(Status_StatusCode)
	*p = x
	return p
}

func (x Status_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pinecone_core_proto_enumTypes[0].Descriptor()
}

func (Status_StatusCode) Type() protoreflect.EnumType {
	return &file_pinecone_core_proto_enumTypes[0]
}

func (x Status_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status_StatusCode.Descriptor instead.
func (Status_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{4, 0}
}

//*
//Request from the controller to individual service for monitoring, updating, and terminating running services.
type ServiceControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function   string  `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`                        // Name of the function.
	FunctionId uint64  `protobuf:"varint,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"` // Unique id of the function (if any).
	Status     *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`                            // Status of the function.
	Service    string  `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`                          // Name of the service the function belongs to.
}

func (x *ServiceControlRequest) Reset() {
	*x = ServiceControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceControlRequest) ProtoMessage() {}

func (x *ServiceControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceControlRequest.ProtoReflect.Descriptor instead.
func (*ServiceControlRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceControlRequest) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ServiceControlRequest) GetFunctionId() uint64 {
	if x != nil {
		return x.FunctionId
	}
	return 0
}

func (x *ServiceControlRequest) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ServiceControlRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

//*
// Represents the a numpy ndarray
type NdArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the actual array data, in bytes
	Buffer []byte `protobuf:"bytes,1,opt,name=buffer,proto3" json:"buffer,omitempty"`
	// the shape (dimensions) of the array
	Shape []uint32 `protobuf:"varint,2,rep,packed,name=shape,proto3" json:"shape,omitempty"`
	// the data type of the array
	Dtype string `protobuf:"bytes,3,opt,name=dtype,proto3" json:"dtype,omitempty"`
	// whether lz4 compression is used on buffer
	Compressed bool `protobuf:"varint,4,opt,name=compressed,proto3" json:"compressed,omitempty"`
}

func (x *NdArray) Reset() {
	*x = NdArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NdArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NdArray) ProtoMessage() {}

func (x *NdArray) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NdArray.ProtoReflect.Descriptor instead.
func (*NdArray) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{1}
}

func (x *NdArray) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *NdArray) GetShape() []uint32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *NdArray) GetDtype() string {
	if x != nil {
		return x.Dtype
	}
	return ""
}

func (x *NdArray) GetCompressed() bool {
	if x != nil {
		return x.Compressed
	}
	return false
}

//*
// Represents the route paths of this message
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function   string                 `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`                        // the name of the Service
	FunctionId int32                  `protobuf:"varint,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"` // the id of the Service
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`     // receiving time
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`           // sending (out) time
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{2}
}

func (x *Route) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *Route) GetFunctionId() int32 {
	if x != nil {
		return x.FunctionId
	}
	return 0
}

func (x *Route) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Route) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

//*
// Represents an execution plane Request
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of the request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// timeout in second until this message is dropped
	Timeout uint32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// path in DAG (defined ahead of time) to follow
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// request schema version
	Version string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Routes  []*Route `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"` // a list of routes this message goes through
	Status  *Status  `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // status info, e.g. error
	// Types that are assignable to Body:
	//	*Request_Query
	//	*Request_Index
	//	*Request_Delete
	//	*Request_Info
	//	*Request_Fetch
	//	*Request_List
	Body         isRequest_Body `protobuf_oneof:"body"`
	Namespace    string         `protobuf:"bytes,13,opt,name=namespace,proto3" json:"namespace,omitempty"`                            // Namespace to perform operation in (if data is divided by namespace, default "")
	ClientId     uint32         `protobuf:"varint,14,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`             // Integer ID that represents the client connection. Assigned by gateway.
	ClientOffset uint32         `protobuf:"varint,15,opt,name=client_offset,json=clientOffset,proto3" json:"client_offset,omitempty"` // Offset of request within client connection. Assigned by gateway.
	ShardNum     uint32         `protobuf:"varint,16,opt,name=shard_num,json=shardNum,proto3" json:"shard_num,omitempty"`             // Shard the message came from. Used by aggregator
	GatewayNum   uint32         `protobuf:"varint,17,opt,name=gateway_num,json=gatewayNum,proto3" json:"gateway_num,omitempty"`       // Tail of gateway
	//*
	//For tracing only
	TelemetryTraceId  uint64 `protobuf:"varint,18,opt,name=telemetry_trace_id,json=telemetryTraceId,proto3" json:"telemetry_trace_id,omitempty"`
	TelemetryParentId uint64 `protobuf:"varint,19,opt,name=telemetry_parent_id,json=telemetryParentId,proto3" json:"telemetry_parent_id,omitempty"`
	ServiceName       string `protobuf:"bytes,20,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Traceroute        bool   `protobuf:"varint,21,opt,name=traceroute,proto3" json:"traceroute,omitempty"` // Send receipts from every function back to the gateway in case the DAG fails
	NumShards         uint32 `protobuf:"varint,22,opt,name=num_shards,json=numShards,proto3" json:"num_shards,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{3}
}

func (x *Request) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Request) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Request) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Request) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Request) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Request) GetBody() isRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Request) GetQuery() *QueryRequest {
	if x, ok := x.GetBody().(*Request_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Request) GetIndex() *IndexRequest {
	if x, ok := x.GetBody().(*Request_Index); ok {
		return x.Index
	}
	return nil
}

func (x *Request) GetDelete() *DeleteRequest {
	if x, ok := x.GetBody().(*Request_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *Request) GetInfo() *InfoRequest {
	if x, ok := x.GetBody().(*Request_Info); ok {
		return x.Info
	}
	return nil
}

func (x *Request) GetFetch() *FetchRequest {
	if x, ok := x.GetBody().(*Request_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *Request) GetList() *ListRequest {
	if x, ok := x.GetBody().(*Request_List); ok {
		return x.List
	}
	return nil
}

func (x *Request) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Request) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *Request) GetClientOffset() uint32 {
	if x != nil {
		return x.ClientOffset
	}
	return 0
}

func (x *Request) GetShardNum() uint32 {
	if x != nil {
		return x.ShardNum
	}
	return 0
}

func (x *Request) GetGatewayNum() uint32 {
	if x != nil {
		return x.GatewayNum
	}
	return 0
}

func (x *Request) GetTelemetryTraceId() uint64 {
	if x != nil {
		return x.TelemetryTraceId
	}
	return 0
}

func (x *Request) GetTelemetryParentId() uint64 {
	if x != nil {
		return x.TelemetryParentId
	}
	return 0
}

func (x *Request) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Request) GetTraceroute() bool {
	if x != nil {
		return x.Traceroute
	}
	return false
}

func (x *Request) GetNumShards() uint32 {
	if x != nil {
		return x.NumShards
	}
	return 0
}

type isRequest_Body interface {
	isRequest_Body()
}

type Request_Query struct {
	Query *QueryRequest `protobuf:"bytes,7,opt,name=query,proto3,oneof"` // A query request object
}

type Request_Index struct {
	Index *IndexRequest `protobuf:"bytes,8,opt,name=index,proto3,oneof"` // An upsert items request object
}

type Request_Delete struct {
	Delete *DeleteRequest `protobuf:"bytes,9,opt,name=delete,proto3,oneof"` // A delete items request object
}

type Request_Info struct {
	Info *InfoRequest `protobuf:"bytes,10,opt,name=info,proto3,oneof"` // An object for a get info request
}

type Request_Fetch struct {
	Fetch *FetchRequest `protobuf:"bytes,11,opt,name=fetch,proto3,oneof"` // Payload for a request to fetch vectors by id
}

type Request_List struct {
	List *ListRequest `protobuf:"bytes,12,opt,name=list,proto3,oneof"` // Payload for a request to list resource in the index
}

func (*Request_Query) isRequest_Body() {}

func (*Request_Index) isRequest_Body() {}

func (*Request_Delete) isRequest_Body() {}

func (*Request_Info) isRequest_Body() {}

func (*Request_Fetch) isRequest_Body() {}

func (*Request_List) isRequest_Body() {}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status code
	Code Status_StatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=core.Status_StatusCode" json:"code,omitempty"`
	// error description of the very first exception
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the details of the error
	Details []*Status_Details `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	// number of messages sent by the function
	MsgSent uint64 `protobuf:"varint,4,opt,name=msg_sent,json=msgSent,proto3" json:"msg_sent,omitempty"`
	// number of messages received by the function
	MsgRecv uint64 `protobuf:"varint,5,opt,name=msg_recv,json=msgRecv,proto3" json:"msg_recv,omitempty"`
	// average time spent by messages in function
	AvgTime map[string]uint32 `protobuf:"bytes,6,rep,name=avg_time,json=avgTime,proto3" json:"avg_time,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// size of a function's dataset if stateful
	Size uint64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{4}
}

func (x *Status) GetCode() Status_StatusCode {
	if x != nil {
		return x.Code
	}
	return Status_SUCCESS
}

func (x *Status) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Status) GetDetails() []*Status_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Status) GetMsgSent() uint64 {
	if x != nil {
		return x.MsgSent
	}
	return 0
}

func (x *Status) GetMsgRecv() uint64 {
	if x != nil {
		return x.MsgRecv
	}
	return 0
}

func (x *Status) GetAvgTime() map[string]uint32 {
	if x != nil {
		return x.AvgTime
	}
	return nil
}

func (x *Status) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ScoredResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String ids of the item results of a query
	Ids *NdArray `protobuf:"bytes,1,opt,name=ids,proto3" json:"ids,omitempty"`
	// Corresponding pairwise scores between the query to each item
	Scores *NdArray `protobuf:"bytes,2,opt,name=scores,proto3" json:"scores,omitempty"`
	// Corresponding data for all of these items, if requested
	Data *NdArray `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScoredResults) Reset() {
	*x = ScoredResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScoredResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoredResults) ProtoMessage() {}

func (x *ScoredResults) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoredResults.ProtoReflect.Descriptor instead.
func (*ScoredResults) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{5}
}

func (x *ScoredResults) GetIds() *NdArray {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ScoredResults) GetScores() *NdArray {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *ScoredResults) GetData() *NdArray {
	if x != nil {
		return x.Data
	}
	return nil
}

//*
// Represents an index request
type IndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ids of items to be inserted
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	// vectors of items to be inserted
	Data *NdArray `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *IndexRequest) Reset() {
	*x = IndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRequest) ProtoMessage() {}

func (x *IndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRequest.ProtoReflect.Descriptor instead.
func (*IndexRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{6}
}

func (x *IndexRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *IndexRequest) GetData() *NdArray {
	if x != nil {
		return x.Data
	}
	return nil
}

//*
// Represents a query request
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopK               uint32           `protobuf:"varint,1,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`                      // Number of results to return for each query
	IncludeData        bool             `protobuf:"varint,2,opt,name=include_data,json=includeData,proto3" json:"include_data,omitempty"` // Whether to include the vectors and raw data in response as well as ids
	Data               *NdArray         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                   // The batch of vectors to query
	Matches            []*ScoredResults `protobuf:"bytes,4,rep,name=matches,proto3" json:"matches,omitempty"`                             // The corresponding matches returned for each query in the batch
	TopKOverrides      []uint32         `protobuf:"varint,5,rep,packed,name=top_k_overrides,json=topKOverrides,proto3" json:"top_k_overrides,omitempty"`
	NamespaceOverrides []string         `protobuf:"bytes,6,rep,name=namespace_overrides,json=namespaceOverrides,proto3" json:"namespace_overrides,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{7}
}

func (x *QueryRequest) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *QueryRequest) GetIncludeData() bool {
	if x != nil {
		return x.IncludeData
	}
	return false
}

func (x *QueryRequest) GetData() *NdArray {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueryRequest) GetMatches() []*ScoredResults {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *QueryRequest) GetTopKOverrides() []uint32 {
	if x != nil {
		return x.TopKOverrides
	}
	return nil
}

func (x *QueryRequest) GetNamespaceOverrides() []string {
	if x != nil {
		return x.NamespaceOverrides
	}
	return nil
}

//*
// Represents a delete request
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`                               // Ids of items to delete
	DeleteAll bool     `protobuf:"varint,2,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"` // Delete all ids
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DeleteRequest) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

//*
// Represents an info request
type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexSize uint64 `protobuf:"varint,1,opt,name=index_size,json=indexSize,proto3" json:"index_size,omitempty"` // Size of a stateful function (Index)
	Dimension uint32 `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`                  // Dimension of the indexed vectors
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{9}
}

func (x *InfoRequest) GetIndexSize() uint64 {
	if x != nil {
		return x.IndexSize
	}
	return 0
}

func (x *InfoRequest) GetDimension() uint32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

//*
// Represents a fetch request
type FetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids     []string   `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`         // Ids of vectors to fetch
	Vectors []*NdArray `protobuf:"bytes,2,rep,name=vectors,proto3" json:"vectors,omitempty"` // Result vectors corresponding to ids
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{10}
}

func (x *FetchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *FetchRequest) GetVectors() []*NdArray {
	if x != nil {
		return x.Vectors
	}
	return nil
}

//*
// Represents a fetch request
type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceType string   `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"` // e.g. 'ids', 'namespace', etc.
	Items        *NdArray `protobuf:"bytes,2,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{11}
}

func (x *ListRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListRequest) GetItems() *NdArray {
	if x != nil {
		return x.Items
	}
	return nil
}

//*
// An acknowledgement from a replica to the leader that it has caught up to that point in the log.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica uint32 `protobuf:"varint,1,opt,name=replica,proto3" json:"replica,omitempty"` // Ordinal of replica the request comes from
	Replay  bool   `protobuf:"varint,2,opt,name=replay,proto3" json:"replay,omitempty"`   // Whether the replica is requesting a replay starting from acked offset
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{12}
}

func (x *Ack) GetReplica() uint32 {
	if x != nil {
		return x.Replica
	}
	return 0
}

func (x *Ack) GetReplay() bool {
	if x != nil {
		return x.Replay
	}
	return false
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"` // WAL offset of this entry
	// Types that are assignable to Data:
	//	*LogEntry_Entry
	//	*LogEntry_Ack
	Data isLogEntry_Data `protobuf_oneof:"data"`
	// The offset of the previous WAL entry. This is not necessarily (offset-1) due to the way log compaction works.
	PreviousOffset int64 `protobuf:"varint,4,opt,name=previous_offset,json=previousOffset,proto3" json:"previous_offset,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{13}
}

func (x *LogEntry) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (m *LogEntry) GetData() isLogEntry_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *LogEntry) GetEntry() *Request {
	if x, ok := x.GetData().(*LogEntry_Entry); ok {
		return x.Entry
	}
	return nil
}

func (x *LogEntry) GetAck() *Ack {
	if x, ok := x.GetData().(*LogEntry_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *LogEntry) GetPreviousOffset() int64 {
	if x != nil {
		return x.PreviousOffset
	}
	return 0
}

type isLogEntry_Data interface {
	isLogEntry_Data()
}

type LogEntry_Entry struct {
	Entry *Request `protobuf:"bytes,2,opt,name=entry,proto3,oneof"` // The request itself as it was received
}

type LogEntry_Ack struct {
	Ack *Ack `protobuf:"bytes,3,opt,name=ack,proto3,oneof"` // Or an acknowledgement from a follower of receiving this entry
}

func (*LogEntry_Entry) isLogEntry_Data() {}

func (*LogEntry_Ack) isLogEntry_Data() {}

// Represents an entry written into a WAL like Kafka. Provides an envelope for storing multiple types of message
// (https://www.enterpriseintegrationpatterns.com/patterns/messaging/EnvelopeWrapper.html).
//
// Contents can be related to data or control.
//
// Data Entries: Examples are requests to upsert or delete data from the index.
// Control Entries: Examples are requests to partition the snapshot, etc.
type WriteAheadLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string identifying the origin of the message. This is used for trouble-shooting / diagnostics.
	//
	// Types that are assignable to Contents:
	//	*WriteAheadLogEntry_Data
	Contents isWriteAheadLogEntry_Contents `protobuf_oneof:"contents"`
}

func (x *WriteAheadLogEntry) Reset() {
	*x = WriteAheadLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAheadLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAheadLogEntry) ProtoMessage() {}

func (x *WriteAheadLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAheadLogEntry.ProtoReflect.Descriptor instead.
func (*WriteAheadLogEntry) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{14}
}

func (m *WriteAheadLogEntry) GetContents() isWriteAheadLogEntry_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *WriteAheadLogEntry) GetData() *WriteAheadLogDataEntry {
	if x, ok := x.GetContents().(*WriteAheadLogEntry_Data); ok {
		return x.Data
	}
	return nil
}

type isWriteAheadLogEntry_Contents interface {
	isWriteAheadLogEntry_Contents()
}

type WriteAheadLogEntry_Data struct {
	Data *WriteAheadLogDataEntry `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

func (*WriteAheadLogEntry_Data) isWriteAheadLogEntry_Contents() {}

type WriteAheadLogDataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*WriteAheadLogDataEntry_Request
	Entry isWriteAheadLogDataEntry_Entry `protobuf_oneof:"entry"`
}

func (x *WriteAheadLogDataEntry) Reset() {
	*x = WriteAheadLogDataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAheadLogDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAheadLogDataEntry) ProtoMessage() {}

func (x *WriteAheadLogDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAheadLogDataEntry.ProtoReflect.Descriptor instead.
func (*WriteAheadLogDataEntry) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{15}
}

func (m *WriteAheadLogDataEntry) GetEntry() isWriteAheadLogDataEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *WriteAheadLogDataEntry) GetRequest() *Request {
	if x, ok := x.GetEntry().(*WriteAheadLogDataEntry_Request); ok {
		return x.Request
	}
	return nil
}

type isWriteAheadLogDataEntry_Entry interface {
	isWriteAheadLogDataEntry_Entry()
}

type WriteAheadLogDataEntry_Request struct {
	// Request is API level modelling and we should decouple it from the stuff we put in the log. However, this
	// seems  to be the fastest way to get something working at the moment.
	// TODO: Deprecate
	Request *Request `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

func (*WriteAheadLogDataEntry_Request) isWriteAheadLogDataEntry_Entry() {}

//*
// Receipts sent back to gateway from each function if "traceroute" flag is set
type TraceRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    uint64   `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ClientId     uint32   `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientOffset uint32   `protobuf:"varint,3,opt,name=client_offset,json=clientOffset,proto3" json:"client_offset,omitempty"`
	Routes       []*Route `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *TraceRoute) Reset() {
	*x = TraceRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRoute) ProtoMessage() {}

func (x *TraceRoute) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRoute.ProtoReflect.Descriptor instead.
func (*TraceRoute) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{16}
}

func (x *TraceRoute) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *TraceRoute) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *TraceRoute) GetClientOffset() uint32 {
	if x != nil {
		return x.ClientOffset
	}
	return 0
}

func (x *TraceRoute) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

//*
// Signal to snapshotter that the index is ready to be distributed to replicas
type SnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Name string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SnapshotRequest) Reset() {
	*x = SnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRequest) ProtoMessage() {}

func (x *SnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRequest) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{17}
}

func (x *SnapshotRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//*
// Response to snapshot request
type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{18}
}

func (x *SnapshotResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type Status_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of that problematic service
	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	// the id of that problematic service
	FunctionId string `protobuf:"bytes,2,opt,name=function_id,json=functionId,proto3" json:"function_id,omitempty"`
	// the class name of the exception
	Exception string `protobuf:"bytes,3,opt,name=exception,proto3" json:"exception,omitempty"`
	// the reason of the exception
	Traceback string `protobuf:"bytes,4,opt,name=traceback,proto3" json:"traceback,omitempty"`
	// the timestamp when error occurs
	Time *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Status_Details) Reset() {
	*x = Status_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pinecone_core_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status_Details) ProtoMessage() {}

func (x *Status_Details) ProtoReflect() protoreflect.Message {
	mi := &file_pinecone_core_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status_Details.ProtoReflect.Descriptor instead.
func (*Status_Details) Descriptor() ([]byte, []int) {
	return file_pinecone_core_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Status_Details) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *Status_Details) GetFunctionId() string {
	if x != nil {
		return x.FunctionId
	}
	return ""
}

func (x *Status_Details) GetException() string {
	if x != nil {
		return x.Exception
	}
	return ""
}

func (x *Status_Details) GetTraceback() string {
	if x != nil {
		return x.Traceback
	}
	return ""
}

func (x *Status_Details) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_pinecone_core_proto protoreflect.FileDescriptor

var file_pinecone_core_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a,
	0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x6d, 0x0a, 0x07, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x06, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0xbe, 0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x52, 0x65, 0x63, 0x76, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x61, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0xb2,
	0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x63, 0x65,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x76, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x44, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x22, 0x7a, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x64, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x43, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x4b,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x4a, 0x0a, 0x0b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0c, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4e, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x57, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x03,
	0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x54, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x68, 0x65, 0x61, 0x64, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x0f, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x42, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0x49, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x64, 0x0a, 0x09, 0x52, 0x50, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x43, 0x61, 0x6c,
	0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x42, 0x40, 0x0a, 0x11, 0x69, 0x6f, 0x2e, 0x70, 0x69, 0x6e,
	0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x2f,
	0x70, 0x69, 0x6e, 0x65, 0x63, 0x6f, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pinecone_core_proto_rawDescOnce sync.Once
	file_pinecone_core_proto_rawDescData = file_pinecone_core_proto_rawDesc
)

func file_pinecone_core_proto_rawDescGZIP() []byte {
	file_pinecone_core_proto_rawDescOnce.Do(func() {
		file_pinecone_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_pinecone_core_proto_rawDescData)
	})
	return file_pinecone_core_proto_rawDescData
}

var file_pinecone_core_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pinecone_core_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_pinecone_core_proto_goTypes = []interface{}{
	(Status_StatusCode)(0),         // 0: core.Status.StatusCode
	(*ServiceControlRequest)(nil),  // 1: core.ServiceControlRequest
	(*NdArray)(nil),                // 2: core.NdArray
	(*Route)(nil),                  // 3: core.Route
	(*Request)(nil),                // 4: core.Request
	(*Status)(nil),                 // 5: core.Status
	(*ScoredResults)(nil),          // 6: core.ScoredResults
	(*IndexRequest)(nil),           // 7: core.IndexRequest
	(*QueryRequest)(nil),           // 8: core.QueryRequest
	(*DeleteRequest)(nil),          // 9: core.DeleteRequest
	(*InfoRequest)(nil),            // 10: core.InfoRequest
	(*FetchRequest)(nil),           // 11: core.FetchRequest
	(*ListRequest)(nil),            // 12: core.ListRequest
	(*Ack)(nil),                    // 13: core.Ack
	(*LogEntry)(nil),               // 14: core.LogEntry
	(*WriteAheadLogEntry)(nil),     // 15: core.WriteAheadLogEntry
	(*WriteAheadLogDataEntry)(nil), // 16: core.WriteAheadLogDataEntry
	(*TraceRoute)(nil),             // 17: core.TraceRoute
	(*SnapshotRequest)(nil),        // 18: core.SnapshotRequest
	(*SnapshotResponse)(nil),       // 19: core.SnapshotResponse
	(*Status_Details)(nil),         // 20: core.Status.Details
	nil,                            // 21: core.Status.AvgTimeEntry
	(*timestamppb.Timestamp)(nil),  // 22: google.protobuf.Timestamp
}
var file_pinecone_core_proto_depIdxs = []int32{
	5,  // 0: core.ServiceControlRequest.status:type_name -> core.Status
	22, // 1: core.Route.start_time:type_name -> google.protobuf.Timestamp
	22, // 2: core.Route.end_time:type_name -> google.protobuf.Timestamp
	3,  // 3: core.Request.routes:type_name -> core.Route
	5,  // 4: core.Request.status:type_name -> core.Status
	8,  // 5: core.Request.query:type_name -> core.QueryRequest
	7,  // 6: core.Request.index:type_name -> core.IndexRequest
	9,  // 7: core.Request.delete:type_name -> core.DeleteRequest
	10, // 8: core.Request.info:type_name -> core.InfoRequest
	11, // 9: core.Request.fetch:type_name -> core.FetchRequest
	12, // 10: core.Request.list:type_name -> core.ListRequest
	0,  // 11: core.Status.code:type_name -> core.Status.StatusCode
	20, // 12: core.Status.details:type_name -> core.Status.Details
	21, // 13: core.Status.avg_time:type_name -> core.Status.AvgTimeEntry
	2,  // 14: core.ScoredResults.ids:type_name -> core.NdArray
	2,  // 15: core.ScoredResults.scores:type_name -> core.NdArray
	2,  // 16: core.ScoredResults.data:type_name -> core.NdArray
	2,  // 17: core.IndexRequest.data:type_name -> core.NdArray
	2,  // 18: core.QueryRequest.data:type_name -> core.NdArray
	6,  // 19: core.QueryRequest.matches:type_name -> core.ScoredResults
	2,  // 20: core.FetchRequest.vectors:type_name -> core.NdArray
	2,  // 21: core.ListRequest.items:type_name -> core.NdArray
	4,  // 22: core.LogEntry.entry:type_name -> core.Request
	13, // 23: core.LogEntry.ack:type_name -> core.Ack
	16, // 24: core.WriteAheadLogEntry.data:type_name -> core.WriteAheadLogDataEntry
	4,  // 25: core.WriteAheadLogDataEntry.request:type_name -> core.Request
	3,  // 26: core.TraceRoute.routes:type_name -> core.Route
	22, // 27: core.SnapshotRequest.time:type_name -> google.protobuf.Timestamp
	22, // 28: core.SnapshotResponse.time:type_name -> google.protobuf.Timestamp
	22, // 29: core.Status.Details.time:type_name -> google.protobuf.Timestamp
	18, // 30: core.SnapshotClient.Call:input_type -> core.SnapshotRequest
	4,  // 31: core.RPCClient.Call:input_type -> core.Request
	4,  // 32: core.RPCClient.CallUnary:input_type -> core.Request
	19, // 33: core.SnapshotClient.Call:output_type -> core.SnapshotResponse
	4,  // 34: core.RPCClient.Call:output_type -> core.Request
	4,  // 35: core.RPCClient.CallUnary:output_type -> core.Request
	33, // [33:36] is the sub-list for method output_type
	30, // [30:33] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_pinecone_core_proto_init() }
func file_pinecone_core_proto_init() {
	if File_pinecone_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pinecone_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NdArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScoredResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAheadLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAheadLogDataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pinecone_core_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pinecone_core_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Request_Query)(nil),
		(*Request_Index)(nil),
		(*Request_Delete)(nil),
		(*Request_Info)(nil),
		(*Request_Fetch)(nil),
		(*Request_List)(nil),
	}
	file_pinecone_core_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*LogEntry_Entry)(nil),
		(*LogEntry_Ack)(nil),
	}
	file_pinecone_core_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*WriteAheadLogEntry_Data)(nil),
	}
	file_pinecone_core_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*WriteAheadLogDataEntry_Request)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pinecone_core_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_pinecone_core_proto_goTypes,
		DependencyIndexes: file_pinecone_core_proto_depIdxs,
		EnumInfos:         file_pinecone_core_proto_enumTypes,
		MessageInfos:      file_pinecone_core_proto_msgTypes,
	}.Build()
	File_pinecone_core_proto = out.File
	file_pinecone_core_proto_rawDesc = nil
	file_pinecone_core_proto_goTypes = nil
	file_pinecone_core_proto_depIdxs = nil
}
